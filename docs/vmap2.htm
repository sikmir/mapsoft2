<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
  <title>mapsoft2 documentation</title>
  <meta name="keywords" content="mapsof2">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
</head>
<body bgcolor="#FFFFFF">



<div align=right>
Language:
<a href="mapdb.ru.htm">RU</a>
<b>EN</b>
</div>

<a href="index.htm">Main page...</a>


<h2>
  Векторные карты в Mapsoft2 (2020-02-15)
</h2>





<p>В данный момент поддержка векторных карт в mapsoft находится
в состоянии разработки. Еще не все сделано, возможны любые изменения.

<!--#################################################################-->

<hr><h3>Общие идеи</h3>

<p>Векторная карта в mapsoft2 - это не более чем набор объектов с
определенным типом и координатами. Тип содержит классификацию объекта
(точка, линия, площадь, текст) и номер (16-битное число). Объекты могут
также содержать информацию о том, как следует показывать данный объект
(угол наклона, увеличение) и связи с другими объектами (например, какие
текстовые подписи относятся к данному объекту).

<p>В карту не входит информация о типах объектов: как их надо рисовать,
какие между ними существуют отношения и т.п., а также о растровом
представлении этой карты: ее системе координат, границе, масштабе, сетке
и т.п.

<p>При изготовлении растровой карты (например, во вьюере) используется
конфигурационный файл, описывающий правила рисования. Там должна быть
информация о системе координат, границе карты, о том, как рисовать разные
типы объектов, если надо, то о связях между типами.

<p>Далее возникает проблема, что вьюер может показывать карту в разных
проекциях и ее надо как-то пересчитывать. В данный момент в чужой проекции
карта просто рисуется теми же знаками, как в своей. При этом простое
масштабирование (например, колевом мыши) работает правильно.

<p>При импорте/экспорте других форматов можно использовать отдельные
конфигурационные файлы, чтобы преобразовывать/удалять разные типы
объектов. Например, при импорте из MP может иметь смысл преобразовывать
определенные точечные объекты в текстовые, поскольку последних в формате MP
нет.

<p>Кроме того, видимо, должна быть сделана функция "обновления" карты:
чтоб можно было по неким правилам автоматически добавлять подписи объектов,
сдвигать/поворачивать некоторые точечные объекты к ближайшим линиям (сейчас это
сделано на этапе рисования) и т.п.

<!--#################################################################-->

<hr><h3>Формат MapDB для хранения карт и интерфейс в mapsoft2</h3>

MapDB - формат для хранения векторных карт в mapsoft2. Он представляет из
себя директорию с несколькими базами данных BerkleyDB:

<ul>
<li> mapinfo.db -- информация о карте
<li> geohash.db -- данные для гео-индексации
<li> objects.db -- информация об объектах
</ul>


<p>Кроме того, в этой же директории могут находиться разные дополнительные
файлы, например, конфигурационный файл для изготовления растровых
картинок.

<p>В данный момент никакого окружения BerkleyDB не создается, каждый файл
является независимой базой данных, одновременно работать с базой данный
может только одна программа. В будущем при необходимости можно будет
делать окружение с блокировками, логами, транзакциями... В базах данных
используются только дефолтные функции сравнения ключей, поэтому все
утилиты для работы с базами BerkleyDB (db_load/db_dump и т.п.) должны
работать.

<p>В базах данных mapinfo.db, objects.db используется целый
32-битный ключ и произвольные данные в качестве значения. В этих данных
может быть запакована достаточно сложная структура. При это используется
упаковка данных в стиле RIFF: 4-символьный тэг ("crds", "name" и т.п.),
4-байтовое число - длина данных в байтах, данные. Для текстовых данных
(название объекта, комментарии и т.п.) используется кодировка UTF8.

<div class="c_api">
<p>В mapsoft2 карта представляется классом MapDB (см. modules/mapdb/mapdb.h).

<p><tt>  MapDB::MapDB(std::string name, bool create = false)</tt> --
Конструктор. Если create==false, то открывает существующую карту,
находящуюся в директории name (если карты не существует, возникает ошибка).
Иначе - создать карту в директории name (директория при необходимости создается,
если какие-то базы данных существуют - возникает ошибка).

<p><tt>  static void delete_db(std::string name)</tt> -- Функция для
удаления всех баз данных, относящихся к карте.


</div>

<!--########################-->
<h4>База данных mapinfo.db</h4>

База данных с 4-байтовым целочисленным ключем для хранения различной
информации о карте. В данный момент поддерживаются следующие ключи:

<ul>

<li>0. Версия формата MapDB, целое число записанное в виде строки.
Сейчас, пока формат еще активно разрабатывается и меняется, это "0".

<p>При открытии карты проверяется ее версия. Если версия карты не
установлена (например, база данных создается заново) то устанавливается
актуальное значение (зашитое в программе). Если версия карты новее, чем
это значение, то возникает ошибка.

<li>1. Название карты (строка). Устанавливается пользователем,
может иметь любое значение.

<li>2. Граница карты. Многоугольник с несколькими сегментами (объект
dMultiLine) упакованный в стиле RIFF с тэгом "crds" для каждого
сегмента. Сегмент состоит из пар координат (lon1,lat1,
lon2,lat2,...), Координаты - градусы в системе WGS84, умноженные на 1e7 и
округленные к ближайшему 4-байтовому целому числу. Граница карты
может быть установлена пользователем и иметь любое значение (в частности,
быть пустой).
</ul>

<p>Есть ощущение, что поле границы карты может быть ненужным (и пока оно
нигде не используется). Границу можно хранить в конфигурационном файле
для изготовления растровых картинок и использовать разные границы для
разных картинок изготовленных из одной карты. То же самое - с именем
карты.

<div class="c_api">
<p>Функции для работы с информацией о карте:

<p><tt>uint32_t MapDB::get_map_version() const;</tt> -- получить версию карты
версии.

<p><tt>  std::string MapDB::get_map_name()</tt> -- получить имя карты

<p><tt>  void MapDB::set_map_name(const std::string & name)</tt> -- изменить имя карты.

<p><tt>  dMultiLine MapDB::get_map_brd()</tt> -- получить границу карты

<p><tt>  void MapDB::set_map_brd(const dMultiLine & b)</tt> -- установить границу карты
<div>

<!--########################-->
<h4>База данных geohash.db</h2>

<p>База данных для геоиндексации. Ключ базы состоит из типа объекта
(целое беззнаковое число, 32 бита) и строки <a href="https://en.wikipedia.org/wiki/Geohash">Geohash</a>. Значение -
идентификатор объекта. Ключи могут повторяться. Обычно для объекта
создается до четырех записей, при этом исключаются слишком короткие
геохэши для небольших объектов, попавших на границы деления. Данные
должны быть синхронизованы с координатами в базе данных objects.db.


<!--########################-->
<h4>База данных objects.db</h2>

<p>Информация об объектах. Ключ - идентификатор объекта (беззнаковое
32-битовое целое число), значение - структура со следующими полями:

<ul>

<li>Тип объекта, 32-битное целое число. Старший байт - классификации
объекта (0-точка, 1-линия, 2-многоугольник, 3-текст), второй байт не
используется, два младших байта - собственно тип объекта (то же, что тип
в MP).

<p>Все остальные поля - необязательны. Они запакованы в стиле RIFF в
произвольном порядке.

<li>Наклон объекта представлен в виде 4-байтового вещественного числа, в
градусах. Запакован с тэгом "angl". Отсчитывается от географического
севера по часовой стрелке. Наклон влияет не на координаты объекта, а на
текст и разные картинки, которые с объектом связаны. Отсутствие
информации о наклоне или значение NaN означает, что картинки будут
ориентирован на верх карты (не на север).

<li>Масштаб объекта представлен в виде 4-байтового вещественного числа.
Запакован с тэгом "scle". Должен влиять на размер линий, картинок, текста
объекта при рисовании (пока это не реализовано).

<li>Выравнивание. Один байт, запакованный с тэгом "algn". Возможные значения:
(0..8: SW,W,NW,N,NE,E,SE,S,C), отсутствующее значение эквивалентно SW(0). Имеет смысл
для текстовых объектов.

<li>Название объекта, строка, запакованая
с тэгом "name". То, что должно отображаться на карте.

<li>Комментарий к объекту, строка, запакованая с тэгом "comm". На карте
не показывается.

<li>Тэги объекта, произвольное число строк, запакованных с тэгами "tags".
Могут быть использованы для маркировки некоторой части объектов. Например,
при импорте перевалов из каталога перевалов все они маркируются неким тэгом.
При обновлении старые объекты с этим тэгом удаляются и добавляются новые
(Тут, кстати, будет важна перепривязка подписей!)

<li>Зависимые объекты, беззнаковые 4-байтовые числа, каждое из которых
запаковано с тэгом "chld" (ID объектов в базе objects.db). Таким образом
объект может быть связан со своими подписями.

<li>Координаты. Многосегментная линия, закодированная в строку также, как
поле границы карты в базе данных mapinfo.db с тэгами "crds" для каждого
сегмента. Сегмент состоит из пар координат (lon1,lat1, lon2,lat2,...),
Координаты - градусы в системе WGS84, умноженные на 1e7 и округленные к
ближайшему 4-байтовому целому числу. При обновлении координат объекта
также должна обновляться база геоиндексации.

<p>TODO: сделать ли идентификатор 64-битным? Или вообще произвольной длины
(16,32,64 бита) - для экономии размера базы?

</ul>

<p> С точки зрения базы данных никакой разницы между точками, линиями,
площадными и текстовыми объектами нет. Различается только тип объекта. В данный момент
не слишком хорошо определено, как должен обрабатываться точечный или
текстовый объект, содержащий несколько координат. Должна
ли использоваться только первая точка или все точки? Должны ли линии в
текстовом объекте использоваться для рисования текста вдоль кривого контура?

<p>Объекты не могут быть пустыми (не содержать координат). Такой запрет
связан с невозможностью разместить такой объект в базе geohash.db.

<div class="c_api">
<p>В mapsoft2 объект представлен классом MapDBObj (см. modules/mapdb/mapdb.h).
Для него определены операции сравнения, конструктор с некими дефолтными
значениями, функции для запаковки/распаковки объекта при хранении в базе
данных.

<p>Карта имеет следующие функции для работы с объектами (эти функции
используют базу данных objects.db для чтения/записи информации об
объектах и базу данных geohash.db для работы с геоиндексацией, обеспечивая их
синхронизацию):

<p><tt>  uint32_t MapDB::add(const MapDBObj & o)</tt> -- добавить новый объект
на карту, вернуть его идентификатор. Идентификатор получается добавлением
единицы к самому большому идентификатору данной карты (или 0, если карта
пуста). При переполнении возникает ошибка. При попытке положить пустой объект
(без координат) возникает ошибка.

<p><tt>  void MapDB::put(uint32_t id, const MapDBObj & o)</tt> --
перезаписать объект с заданным идентификатором. Если объект не
существует, он создается. При попытке записать пустой объект
(без координат) возникает ошибка.

<p><tt>  MapDBObj MapDB::get(const uint32_t id)</tt> --
прочитать объект с заданным идентификатором.

<p><tt>  void MapDB::del(uint32_t id)</tt> -- удалить объект с заданным
идентификатором. Если объект не существует, возникает ошибка.

<p><tt>  std::set<uint32_t> find(MapDBObjClass cl, uint16_t tnum,   const
dRect & range) </tt> -- найти идентификаторы объектов заданного типа,
которые попадают в заданный диапазон координат. Параметр cl может
принимать следующие значения: 0 or MAPDB_POINT, 1 or MAPDB_LINE, 2 or
MAPDB_POLYGON, tnum - 16-битный номер типа.

<p><tt>  std::set<uint32_t> find(int type, const dRect & range) </tt> --
то же самое, но используется 32-битный тип. Функции find позволяет быстро
выбрать все объекты, которые могут попасть (но не обязательно попадают) в
заданный диапазон координат. При выполнении каких-то медленных операция с
объектами может иметь смысл дополнительно проверить попадание объекта в
нужный диапазон.

<p><tt>  std::set<uint32_t> get_types() </tt> -- Получить множество всех
типов объектов в базе данных. Возвращаются 32-битные типы.
</div>


<!--#################################################################-->
<!--#################################################################-->
<hr><h3>Программа ms2mapdb для работы с векторными картами</h3>


<p>Для произведения разных операций с векторными картами используется
программа ms2mapdb:

<p><tt><pre>
$ ms2mapdb (-h|--help|--pod)
$ ms2mapdb <action> (-h|--help)
$ ms2mapdb <action> [<action arguments and options>]
</pre></tt>

<p>Операции (actions):

<ul>
<li><tt>create</tt> -- создать новую карту
<li><tt>delete</tt> -- удалить все базы данных, относящиеся к карте
<li><tt>add_obj</tt> -- добавить новый объект
<li><tt>types</tt>   -- напечатать все типы объектов, которые встречаются в карте
<li><tt>bbox</tt>    -- напечатать примерный диапазон координат карты
<li><tt>import_mp</tt> -- загрузить карту в формате MP
<li><tt>export_mp</tt> -- сохранить карту в формате MP
<li><tt>import_vmap</tt> -- загрузить карту в формате VMAP
<li><tt>export_vmap</tt> -- сохранить карту в формате VMAP
<li><tt>render</tt> -- получить изображение карты
</ul>

TODO: удаление объектов по id, тэгу или типу, удаление всех объектов;
импорт/экспорт в геоданные

<!--#################################################################-->
<!--#################################################################-->
<hr><h3>Формат MP ("Польский формат")</h3>

<!--########################-->
<h4>Поддержка формата MP в mapsoft2</h4>

<p>Описание формата:
<a href="http://magex.sourceforge.net/doc/cGPSmapper-UsrMan-v02.4.pdf">http://magex.sourceforge.net/doc/cGPSmapper-UsrMan-v02.4.pdf</a>

<p>В mapsoft2 карта представляется классом MP, а объект - классом MPObj
(см. modules/mp/mp.h) Поддерживается чтение и запись карты в MP-файл.
Читаются и записываются:

<p>Заголовок файла, секция [IMG ID], включая комментарии, находящиеся
перед этой секцией. Внутри секции может находиться большое число разных
параметров, записанных в виде &lt;ключ&gt;=&lt;значение&gt; Часть
параметров читаются в соответствующие поля структуры MP и проверяются.
Остальные хранятся в виде текстовых строк в объект типа Opt. Таким
образом, при чтении и записи файла пaрaметры, даже нестандартные, не
должны теряться (но если файл импортируется в MapDB, то почти все -
теряется). Если читаются несколько файлов MP, то используется заголовок
от последнего файла, а все объекты объединяются.

<p>Точечные, линейные и площадные объекты, секции [POI], [POLYLINE],
[POLYGON], включая комментарии, находящиеся перед этими секциями. При
чтении понимаются старые названия секций [RNG*]. Остальные секции не
читаются. В каждом объекте читаются параметры Type, Label, EndLevel,
Data* или Origin*. Данные могут находиться в разных слоях,
объявленных в заголовке. TODO: читать/записывать все поля, в том
числе - нестандартные, использующиеся в mapsoft1.

<p>Параметр заголовка CodePage (если он присутствует) используется для
преобразования текстовых строк: имени карты (Name), комментариев и всех
неизвестных параметров. Значение должно соответствовать windows codepage,
по умолчанию: 1251 (возможно, следует заменить на что-то более нейтральное).

<p>При чтении объектов поддерживается нестандартный параметр Direction,
который был использован в mapsoft1. Если Direction==2, то координаты
линий объекта сохраняются в обратном порядке. При записи параметр Direction
не используется.

<!--########################-->
<hr><h4>Импорт и экспорт карт в формате MP</h4>

<p>Для импорта карты из формата MP в формат MapDB
используется метод <tt>MapDB::import_mp</tt> или программа
ms2mapdb.

<p><tt> void MapDB::import_mp(const string & mp_file, const Opt & opts)</tt>

<p><tt> $ ms2mapdb import_mp &lt;mapdb_folder&gt; &lt;mp_file&gt; &lt;options&gt;</tt>

<p>Параметр <tt>--config &lt;file&gt;</tt> задает конфигурационный файл.
При использовании конфигурационного файла объекты по умолчанию не
импортируются, все нужные правила надо явно указать в файле. Если же
конфигурационный файл не используется, то все объекты импортируются с
сохранением типов. В дополнение к конфигурационному файлу можно
использовать параметры командной строки (они имеют приоретет). В
конфигурационном файле допустимы комментарии (начинающиеся с символа #),
пустые строки, одинарные и двойные кавычки, символ \ для защиты
специальных символов. Могут использоваться следующие команды:

<ul>

<li><tt>(point|line|area):&lt;in_type&gt;
(point|line|area):&lt;out_type&gt;</tt> --
преобразовать точечные, линейные, площадные объекты с типом in_type в тип
out_type. Вместо второго аргумента можно использовать "-", в этом случае
тип объекта не меняется.

<li><tt>unknown_types (skip|convert|warning|error)</tt> -- определить,
что надо делать с типами, которые не заданы явно в конфигурационном
файле. skip - молча пропускать, convert - преобразовывать с сохранением
типа, warning - пропускать и писать предупреждение, error - выдать ошибку
и прекратить преобразование. Значение по умолчанию - convert. Если
используется convert и преобразуется неизвестный тип, то подписи
преобразуются в текстовые объекты с типом 1.

<li><tt>data_level &lt;N&gt;</tt> -- брать данные, соответствующие определенному
уровню детализации. Соответствующий параметр командной строки: --data_level.

</ul>


<p>Для экспорта карты из MapDB в формат MP используется метод
export_mp или вызов программы ms2mapdb:

<p><tt> void MapDB::export_mp(const string & mp_file, const Opt & opts)</tt>

<p><tt> $ ms2mapdb export_mp &lt;mapdb_folder&gt; &lt;mp_file&gt; &lt;options&gt;</tt>

<p>Использование конфигурационного файлa (параметр --config) аналогично
команде импорта. Допустимые команды:

<ul>

<li><tt>(point|line|area):&lt;in_type&gt;
(point|line|area):&lt;out_type&gt;</tt> -- то же, что и в import_mp.

<li><tt>unknown_types (skip|convert|warning|error)</tt> -- то же, что и в import_mp.

<li><tt>codepage &lt;value&gt;</tt> -- установить кодировку MP-файла
(windows codepage). Соответствующий параметр командной строки:
--codepage.

<li><tt>name &lt;value&gt;</tt> -- Установить имя MP-файла.
Соответствующий параметр командной строки: --name.

<li><tt>id &lt;value&gt;</tt> -- Установить ID MP-файла. Соответствующий
параметр командной строки: --id.

</ul>

<!--#################################################################-->
<!--#################################################################-->
<hr><h3>Формат VMAP</h3>

VMAP - текстовый формат хранения векторнных карт, использующийся в
mapsoft1.

<p>Для импорта карты из MapDB в формат VMAP используется метод
import_vmap или вызов программы ms2mapdb:

<p><tt> void MapDB::import_vmap(const string & vmap_file, const Opt & opts)</tt>

<p><tt> $ ms2mapdb import_vmap &lt;mapdb_folder&gt; &lt;vmap_file&gt; &lt;options&gt;</tt>

<p>Параметр <tt>--config &lt;file&gt;</tt> задает конфигурационный файл.
В конфигурационном файле допустимы комментарии (начинающиеся с символа
#), пустые строки, одинарные и двойные кавычки, символ \ для защиты
специальных символов. Могут использоваться следующие команды:

<ul>

<li><tt>(point|line|area):&lt;in_type&gt;
(point|line|area):&lt;out_type&gt; [text:&lt;label_type&gt;]</tt> --
преобразовать точечные, линейные, площадные объекты с типом in_type в тип
out_type, их подписи преобразовать в текстовые объекты с типом
label_type. Если третий аргумент отсутствует, то текстовые объекты не
создаются. Вместо второго аргумента можно использовать "-", в этом случае
тип объекта не меняется.

<li><tt>unknown_types (skip|convert|warning|error)</tt> -- определить,
что надо делать с типами, которые не заданы явно в конфигурационном
файле. skip - молча пропускать, convert - преобразовывать с сохранением
типа, warning - пропускать и писать предупреждение, error - выдать ошибку
и прекратить преобразование. Значение по умолчанию - convert. Если
используется convert и преобразуется неизвестный тип, то подписи
преобразуются в текстовые объекты с типом 1.

</ul>


<p>Для экспорта карты из MapDB в формат VMAP используется метод
export_vmap или вызов программы ms2mapdb:

<p><tt> void MapDB::export_vmap(const string & vmap_file, const Opt & opts)</tt>

<p><tt> $ ms2mapdb export_vmap &lt;mapdb_folder&gt; &lt;vmap_file&gt; &lt;options&gt;</tt>

<p>Использование конфигурационного файлa (параметр --config) аналогично
команде импорта. Допустимые команды:

<ul>

<li><tt>(point|line|area):&lt;in_type&gt; (point|line|area):&lt;out_type&gt;</tt> --
преобразовать точечные, линейные, площадные объекты с типом in_type в тип
out_type. Вместо второго аргумента можно использовать "-", в этом случае
тип объекта не меняется.

<li><tt>unknown_types (skip|convert|warning|error)</tt> --
определить, что надо делать с типами, которые не заданы явно в конфигурационном
файле. skip - молча пропускать, convert - преобразовывать с сохранением
типа, warning - пропускать и писать предупреждение, error - выдать ошибку
и прекратить преобразование. Значение по умолчанию - convert.

</ul>






</body>
</html>
